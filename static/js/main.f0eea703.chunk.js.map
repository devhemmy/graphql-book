{"version":3,"sources":["queries/Queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","serviceWorker.js","index.js"],"names":["getAuthorsQuery","gql","_templateObject","getBooksQuery","_templateObject2","addBookMutation","_templateObject3","getBookQuery","_templateObject4","BookDetails","book","this","props","data","react_default","a","createElement","name","genre","author","className","books","map","item","key","id","displayBookDetails","Component","graphql","options","variables","bookId","BookList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selected","_this2","loading","onClick","e","setState","displayBooks","components_BookDetails","AddBook","authorId","disabled","authors","value","preventDefault","refetchQueries","query","onSubmit","submitForm","bind","type","onChange","target","displayAuthors","compose","client","ApolloClient","uri","App","react_apollo_browser_umd","components_BookList","components_AddBook","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0eea703.chunk.js","sourcesContent":["import {gql} from \"apollo-boost\";\r\n\r\nconst getAuthorsQuery = gql`\r\n    {\r\n        authors {\r\n            name\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nconst getBooksQuery = gql`\r\n  {\r\n    books{\r\n      name\r\n      id\r\n    }\r\n  }\r\n`\r\nconst addBookMutation = gql`\r\n  mutation($name:String!,$genre:String!,$authorId:ID!){\r\n    addBook(name:$name,genre:$genre,authorId:$authorId){\r\n      name\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nconst getBookQuery = gql`\r\nquery($id:ID){\r\n  book(id:$id){\r\n    id\r\n    name\r\n    genre\r\n    author{\r\n      id\r\n      name\r\n      age\r\n      books{\r\n        name\r\n        id\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport{getAuthorsQuery , getBooksQuery, addBookMutation,getBookQuery};\r\n","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { getBookQuery } from '../queries/Queries';\r\n\r\nclass BookDetails extends Component {\r\n    displayBookDetails(){\r\n        const { book } = this.props.data;\r\n        if(book){\r\n            return(\r\n                <div>\r\n                    <h2>{ book.name }</h2>\r\n                    <p>{ book.genre }</p>\r\n                    <p>{ book.author.name }</p>\r\n                    <p>All books by this author:</p>\r\n                    <ul className=\"other-books\">\r\n                        { book.author.books.map(item => {\r\n                            return <li key={item.id}>{ item.name }</li>\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            );\r\n        } else {\r\n            return( <div>No book selected...</div> );\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div id=\"book-details\">\r\n                { this.displayBookDetails() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(getBookQuery, {\r\n    options: (props) => {\r\n        return {\r\n            variables: {\r\n                id: props.bookId\r\n            }\r\n        }\r\n    }\r\n})(BookDetails);\r\n","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { getBooksQuery } from '../queries/Queries';\r\n\r\n// components\r\nimport BookDetails from './BookDetails';\r\n\r\nclass BookList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            selected: null\r\n        }\r\n    }\r\n    displayBooks(){\r\n        var data = this.props.data;\r\n        if(data.loading){\r\n            return( <div>Loading books...</div> );\r\n        } else {\r\n            return data.books.map(book => {\r\n                return(\r\n                    <li key={ book.id } onClick={ (e) => this.setState({ selected: book.id }) }>{ book.name }</li>\r\n                );\r\n            })\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <ul id=\"book-list\">\r\n                    { this.displayBooks() }\r\n                </ul>\r\n                <BookDetails bookId={ this.state.selected } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(getBooksQuery)(BookList);\r\n","import React, { Component } from 'react';\r\nimport { graphql , compose } from 'react-apollo';\r\nimport { getAuthorsQuery,addBookMutation,getBooksQuery } from '../queries/Queries';\r\n\r\nclass AddBook extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            genre: '',\r\n            authorId: ''\r\n        };\r\n    }\r\n    displayAuthors(){\r\n        var data = this.props.getAuthorsQuery;\r\n        if(data.loading){\r\n            return( <option disabled>Loading authors</option> );\r\n        } else {\r\n            return data.authors.map(author => {\r\n                return( <option key={ author.id } value={author.id}>{ author.name }</option> );\r\n            });\r\n        }\r\n    }\r\n    submitForm(e){\r\n        e.preventDefault()\r\n        this.props.addBookMutation({\r\n          variables:{\r\n            name:this.state.name,\r\n            genre:this.state.genre,\r\n            authorId:this.state.authorId\r\n          },\r\n          refetchQueries:[{query:getBooksQuery}]\r\n        });\r\n    }\r\n    render(){\r\n        return(\r\n            <form id=\"add-book\" onSubmit={ this.submitForm.bind(this) } >\r\n                <div className=\"field\">\r\n                    <label>Book name:</label>\r\n                    <input type=\"text\" onChange={ (e) => this.setState({ name: e.target.value }) } />\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label>Genre:</label>\r\n                    <input type=\"text\" onChange={ (e) => this.setState({ genre: e.target.value }) } />\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label>Author:</label>\r\n                    <select onChange={ (e) => this.setState({ authorId: e.target.value }) } >\r\n                        <option>Select author</option>\r\n                        { this.displayAuthors() }\r\n                    </select>\r\n                </div>\r\n                <button>+</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n  graphql(getAuthorsQuery,{name:\"getAuthorsQuery\"}),\r\n  graphql(addBookMutation,{name:\"addBookMutation\"})\r\n)(AddBook);\r\n","import React, { Component } from 'react';\nimport ApolloClient from \"apollo-boost\";\nimport {ApolloProvider} from \"react-apollo\"\n\n//components\nimport BookList from \"./components/BookList\"\nimport AddBook from \"./components/AddBook\"\nconst client = new ApolloClient({\n  uri:\"https://hemmy-app.herokuapp.com/graphql\"\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div id=\"main\">\n          <h1>Hemmy App!</h1>\n          <BookList />\n          <AddBook />\n        </div>\n      </ApolloProvider>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}